
#user  nobody;
worker_processes  1;

error_log  logs/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}



http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
	
	#lua模块路径，其中”;;”表示默认搜索路径，默认到/usr/servers/nginx下找  
	lua_package_path "$prefix/?.luac;$prefix/?.lua;;";

	lua_shared_dict shared_data 1m;
	resolver 8.8.8.8;

#初始化
	#init_by_lua_file lua/init.lua;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

# nginx 处理请求的11个阶段
# post-read nginx读取并解析完请求头之后，就会立即开始运行  允许注册处理程序  例如 ngx-realip
# server-rewrite 
#find-config  不予许注册处理程序  找到请求路径与 location的配置的对应关系
#rewrite  ngx_set_misc ngx_lua中的set_by_lua\rewrite_by_lua  set 
#post-rewrite  不接受处理程序   而是由nginx_rewrite进行内部跳转(如果有的话) 实现内部跳转的有rewrite和echo_exec(content阶段)
#preaccess  ngx-limit-req 控制请求的访问频度 ngx-limit-zone  限制访问的并发度
#access  ngx-access ngx-auth-request ngx-lua的access_by_lua  
#post-access  不支持注册处理模块  satisfy主要用于配合access阶段配置的多个模块的协作方式 all/any
#try-files content log 
#
#
#
		set_real_ip_from 127.0.0.1;  
		set_real_ip_from 127.0.0.0/24; #可以设置多个
		real_ip_header X-IP;
		location /post_read{
			set $addr $remote_addr;
			echo "from $addr";
		}

		location /post_access{
			satisfy all;
			#allow 127.0.0.1;
			deny all;
			access_by_lua '
				ngx.exit(ngx.OK)
			';
			echo "hello world";
		}

		location /post_access_any{
			satisfy any;
			deny all;
			access_by_lua '
				ngx.exit(ngx.OK)
			';
			echo "hello any";
		}

		location /access_any{
			satisfy any;
			deny all;
			access_by_lua '
				ngx.exit(ngx.HTTP_FORBIDDEN)
			';
			echo "hello any";
		}


		rewrite ^/server_r /server_r2;  #server里的rewrite  发生在 server-rewrite 阶段，所以不存在涉及到内部跳转 早于 find-config

		location /server_r{
			echo "server_r";
		}

		location /server_r2{
			echo "server_r2";
		}


		location /find_config {
			echo "find-config";
		}


        location /cookie_var {
        	default_type text/html;
        	content_by_lua '
        		if ngx.var.cookie_user == nil then
        			ngx.say("cookie user is missing")
        		else
        			ngx.say("cookier user== ",ngx.var.cookie_user)
        		end
        	';

        }

        location /rewrite {
        	set $str "123";
        	rewrite ^ /rewrite2; #告诉ngxin有必要在post-rewrite阶段发起内部跳转; 为什么要放到post-rewrite阶段会退到find-config呢?为了在最初匹配的location中支持多次反复的改写URI
        	rewrite ^ /rewrite3;
        }
        location /rewrite2{
        	echo "222222  str=$str";
        }

        location /rewrite3{
        	echo "333333  str=$str";
        }

        location /var1 {
        	set $msg hello_msg;  #用户自定义变量
        	echo_exec /nginx_var; #内部跳转能够 完成 变量传递  nginx变量值容器的生命周期是与当前正在处理的请求绑定的，而与location无关
        }

        location /inline_var {
        	default_type "text/html"; #注意设置返回内容
        	echo "uri : $uri"; #不带参数 经过解码
        	echo "request_uri=$request_uri"; #未经解码;包含参数
        }

        location /request_param {
        	default_type "text/html"; #注意设置返回内容
        	echo "name=$arg_name"; #arg_xxxx xxxx部分不区分大小写
        	echo "args= $args";
        }

        location /nginx_var{
        	set $a 1;
        	set $b 2;
        	set_by_lua $c '
        		return ngx.var.a+ngx.var.b
        	';
        	set $var hello;
        	default_type "text/html"; #注意设置返回内容
        	echo "hello $var"; # 变量定义
        	echo "msg content: $msg"; # 如果变量没有的话 当前内容就不输出了
        	set $name "name here";
        	content_by_lua '
       			ngx.say("$name=",ngx.var.name," var c=",ngx.var.c)  --访问nginx不存在的变量 就会是nil  
       		';
        }

        location /mo_s1{
        	default_type "text/html"; #注意设置返回内容
        	set $a 32;
        	echo $a;
        	set $a 56;
        	echo $a;
        }

        location /mo_content{
        	default_type "text/html";
        	echo "echo "; 
        	content_by_lua ' 
        		--[[
        			--处于content阶段 echo 与content_by_lua 不能同时共存;echo可以用多次; 但是content_by_lua不可以
        		]]
        		ngx.say("hello lua content")
        	';
        	#content_by_lua '
        	#	ngx.say("second lua content")
        	#';
        }

    

        location /index.html{
	        default_type "text/html";
	        content_by_lua '
	        	ngx.say("index.html")
	        ';
        }

        location /lua_phrase {
        	rewrite_by_lua '
        		return ;
        	';
        	access_by_lua 'return';
        	echo "hello echo directive";
        	content_by_lua '
        		ngx.say("hello content by lua")
        	';
        }

        # rewrite 阶段之后 是 access阶段(命令 deny、access); rewrite阶段可以访问数据库 rewrite_by_lua
        location /mo_access{
        		#allow 127.0.0.1;
        		#deny all;
        		access_by_lua '  --运行在access阶段的tail处
        			if ngx.var.remote_addr == "127.0.0.1" then
        				return
        			else
        				ngx.exit(403)
        			end
        		';
        		echo "hello world";
        }

        location /mo_s2{
        	default_type "text/html"; #注意设置返回内容
        	set $a 32;
        	more_set_input_headers "X-Species: $a"; #phrase: rewrite tail
			set $a 58;


			set $b  110 ;
			rewrite_by_lua '  #也是运行在rewrite tail阶段
				 ngx.var.b=ngx.var.b*2;
			';
			set $b 11;

        	echo "X-Species: $http_x_species b=$b";


        }





		location /lua_module {
			default_type "text/html";
			content_by_lua_file lua/lua_cus.lua;
		}

        location /lua_china {
			default_type text/html;
        	content_by_lua_file lua/lua_chinnese.lua;
        }

        location /shared_dic {
        	default_type text/html;
        	content_by_lua_file lua/shared_dic.lua;
        }

        location /lua_json {
        	default_type text/html;
        	content_by_lua_file lua/lua_json.lua;
        }

        location /lua_http {
        	default_type "text/html";
        	lua_code_cache on;
        	content_by_lua_file lua/lua_http.lua;
        }

        location /lua_mysql {
        	default_type "text/html";
        	content_by_lua_file lua/lua_mysql.lua;
        }

        location /lua_redis {
        	default_type "text/html";
        	content_by_lua_file lua/redis.lua;
        }

        location /lua_access {
        	default_type "text/html";
        	access_by_lua_file lua/access.lua;
        	echo "allowd";
        }

        location / {
            root   html; #文件放到html目录下  如果没有指定root 那么static模块就会默认从安装根目录下的html下找静态文件
        }
		
        location /lua {
        	default_type text/html;
        	#content_by_lua_file 'ngx.say("hello lua");';
        	content_by_lua_file lua/connect.lua;
        }
        location /lua_redirect {

        	content_by_lua_file lua/redirect.lua;
        }

		location = /hello {
			default_type text/html;
            content_by_lua 'ngx.say("hello world");';
        }
		
		location = /connect {
			default_type text/html;
            content_by_lua_file lua/connect.lua;
        }
        

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
